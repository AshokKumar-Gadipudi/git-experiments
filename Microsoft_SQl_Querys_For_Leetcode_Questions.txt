Question1: Write a solution to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.

MS SQL Query: SELECT p.firstname, p.lastname,a.city,a.state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;

Question2: Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).

MS SQL Query: SELECT 
CASE WHEN COUNT(DISTINCT salary)= 1 THEN NULL
     ELSE (SELECT salary FROM (SELECT DISTINCT salary FROM Employee)AS Distinctsalaries ORDER BY salary DESC OFFSET 1 ROW FETCH NEXT 1 ROW ONLY)
END AS SecondHighestSalary FROM Employee;

Question3: Write a solution to find the nth highest distinct salary from the Employee table. If there are less than n distinct salaries, return null.

MS SQL Query: CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS
BEGIN
    RETURN (
        SELECT DISTINCT salary
        FROM Employee
        ORDER BY salary DESC
        OFFSET @N -1 ROWS FETCH NEXT 1 ROWS ONLY

    );
END

Question 4: Write a solution to find the rank of the scores. The ranking should be calculated according to the following rules:

The scores should be ranked from the highest to the lowest.
If there is a tie between two scores, both should have the same ranking.
After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.
Return the result table ordered by score in descending order.

MS SQL Query: SELECT score, DENSE_RANK() OVER(ORDER BY score DESC) AS rank FROM Scores;

Question 5: Find all numbers that appear at least three times consecutively.

Return the result table in any order.

MS SQL Query: WITH NumberFlags AS (
    SELECT 
        num,
        LAG(num, 1) OVER (ORDER BY id ASC) AS Prev1,
        LAG(num, 2) OVER (ORDER BY id ASC) AS Prev2
    FROM Logs
)
SELECT DISTINCT num AS ConsecutiveNums
FROM NumberFlags
WHERE num = Prev1 AND Prev1 = Prev2;


